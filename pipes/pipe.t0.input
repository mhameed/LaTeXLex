\magnification=\magstep1
\font \bigbold =cmbx10 scaled \magstep1

\noindent CM30073 Advanced Algorithms and Complexity
\bigskip
\bigskip

\centerline {\bigbold Lecture Notes 7}
\medskip

\centerline {Issued  4 May 2007}
\bigskip

%Here is a comment added by EHC

\noindent {\bf 1.}\quad {\bf Complexity measure for real numbers machines}
\medskip %And another comment added by EHC

\begin{itemize}
\item This file was originally from Nicolai \item But we have added some extras for testing
\item This is 
one of those extras
\end{itemize}

\begin{tabular}{ccc}
& 
comments & tabular & itemize \\
\hline
nnv & 
No & No & No \\ ehc & 
Added & Added & Added
\end{tabular}

In LN 5 the {\it running time} $T_M(y)$ was introduced for the computation
of the machine $M$ on the input $y \in {\overline I}$.
The running time is a real numbers machine analogy of the number of elementary
steps for Turing machine computation. %And a third comment added by EHC
As in Turing machine case, we say that $M$ has {\it polynomial complexity}
if $T_M(y)$ is bounded from above by a polynomial in the size of the input
(where the concept of {\it size} has yet to be defined).
This leads us to the following sequence of definitions.
\bigskip

\noindent {\bf Definition 1.}\quad {\sl For an input $y=(y_1, \ldots , y_l)
\in {\overline I} = {\bf R}^l$ its {\rm size} is $l$. }
\bigskip

\noindent {\bf Definition 2.}\quad {\sl A real numbers machine $M$ has
{\rm polynomial complexity} if
$$T_M(y) \le c({\rm size}(y))^q$$
for all $y \in {\overline I}$ and some positive integer constants
$c,q$. }
\bigskip

\noindent {\bf Remark.}\quad In the context of complexity, we consider
$l$, the dimension of the input space, as a parameter.
That is, we view a real numbers machine as a series of similar machines,
as defined above, parameterized by $l$, having identical graphs, but
differing in the dimension of spaces $\overline I$, $\overline S$,
$\overline O$.
Constants $c$ and $q$, in the Definition~2, {\it do not} depend on $l$.
Rigorous definition of the machine with respect to complexity issues requires
introduction of infinite dimension spaces for $\overline I$, $\overline S$,
$\overline O$.
\bigskip

\noindent {\bf Examples.}
\medskip

\noindent (1)\quad Performing arithmetic operations over reals can be done
by machines with polynomial complexity.

Observe that the similar fact (polynomial complexity algorithm for arithmetic)
is true for integers and Turing machines.
\medskip

\noindent (2)\quad The machine $M$ for finding the integer part of a real
number has $T_M(y) = O(y)$.
Observe that  $y$ is a real number
(a point having {\it one} component), thus if a machine $M$ had polynomial
complexity, then $T_M(y)$ would be a constant.
It follows that $M$ does {\it not} have polynomial complexity.
\bigskip

\noindent {\bf 2.}\quad {\bf Yes - No problems}
\medskip

\noindent {\bf Definition~1.}\quad {\sl We say that a RE set
${\cal L}_{\rm yes} \subset {\overline I}$,
is a {\bf Yes - No}-problem belonging to
the class $P$ if there is a real numbers machine $M$ {\rm of polynomial
complexity} with $\Omega_M = {\overline I}$ such that
\medskip

\noindent $\phi_M(y)=1$ for all $y \in {\cal L}_{yes}$, and
\medskip

\noindent $\phi_M(y)=0$ for all $y \in {\overline I} \setminus
{\cal L}_{yes}$.
\medskip

(Function $\phi_M(y)$ was defined previously and carries a halting (for $M$)
input $y$ to the corresponding output computed by $M$.) }
\bigskip

\noindent {\bf Definition~2.}\quad {\sl We say that a RE set
${\cal L}_{\rm yes} \subset {\overline I}$,
is a {\bf Yes - No}-problem belonging to
the class $NP$ if there is a real numbers machine $M$ (called
{\rm nondeterministic} in this context) with the input space
${\overline I_M} = {\overline I} \times {\overline I'}$, where
${\overline I'} = {\bf R}^s$ for some integer $s \ge 0$, such that
\medskip

\noindent (1)\quad $\phi_M(y,y')$ takes values 1 or 0 only;
\medskip

\noindent (2)\quad if $\phi_M(y,y')=1$, then $y \in {\cal L}_{yes}$;
\medskip

\noindent (3)\quad for every $y \in {\cal L}_{yes}$ there is
$y' \in {\overline I'}$ such that $\phi_M(y,y')=1$ and
$T_M(y,y') \le c({\rm size}(y))^q$ for some positive $c,q \in {\bf Z}$.
\medskip

(Subvector $y' \in {\overline I'}$ can be interpreted as a ``guess''
made by nondeterministic machine $M$ at the beginning of the
computation.) }
\bigskip

\noindent {\bf Theorem.}\quad $P \subset NP$.
\medskip

\noindent {\bf Proof}\quad is obvious, since any nondeterministic machine
is a particular case of a deterministic (ordinary) one.
\medskip

\noindent {\bf Remark.}\quad It is not known whether or not $P=NP$.
It is an open problem independent from its combinatorial counterpart.
\bigskip

\noindent {\bf 3.}\quad {\bf Examples of problems in $NP$}
\medskip

In both of the following examples the RE set of the kind
${\cal L}_{yes}$ is the set of all inputs leading to output
{\bf Yes}.
\bigskip

\noindent (1)\quad {\it Traveling Salesman}
\medskip

\noindent {\bf Input :}\quad Distance matrix
$$\| d_{ij} \|,\> 1 \le i,j \le n,\> 0< d_{ij} \in {\bf R},$$
and a real number $k>0$.
\medskip

\noindent {\bf Output :}\quad {\bf Yes} if there exists a permutation
$i_1, i_2, \ldots ,i_n$ (called ``tour'')
of the numbers $1,2, \ldots ,n$ such that
$$ \sum_{1 \le j < n} d_{i_ji_{j+1}} + d_{i_ni_1} \le k;$$
else, {\bf No}.
\bigskip

A nondeterministic machine for Traveling Salesman is shown on
a separate sheet.
The ``guess'' here is the tour $y'=(y'_1, \ldots , y'_n)$
of the length not exceeding $k$.
The machine includes subroutine for deciding whether $y'$ is
indeed a tour, which simply checks (in polynomial time) that each integer
from 1 to $n$ appears in the sequence $y'_1, \ldots , y'_n$.
\bigskip

\noindent (2)\quad {\it 4-Feasibility}
\medskip

\noindent {\bf Input :}\quad Polynomial $f$ in $n$ variables with real
coefficients and of the degree at most 4 (given as a list of all coefficients
in a certain order).
\medskip

\noindent {\bf Output :}\quad {\bf Yes} if there exists a real solution
of the equation $f=0$, that is, a vector $x=(x_1, \ldots , x_n) \in
{\bf R}^n$ with $f(x)=0$; else, {\bf No}.
\bigskip

A nondeterministic machine first ``guesses'' the solution $y'$ of
$f=0$ and then checks in polynomial time whether $f(y')=0$.
\bigskip

\noindent {\bf 4.}\quad {\bf $NP$-complete problems}
\medskip

\noindent {\bf Definition~1.}\quad {\sl For two {\bf Yes - No}-problems
${\cal L}_1 \subset {\overline I}_1,\> {\cal L}_2 \subset {\overline I}_2$,
we say that ${\cal L}_1$ is polynomially
transformable to ${\cal L}_2$ over {\bf R} (notation:
${\cal L}_1 \propto_{\bf R} {\cal L}_2$) if there is a map
$$\psi\> :\quad {\overline I}_1 \longrightarrow {\overline I}_2$$
such that:
\medskip

\noindent (1)\quad $y \in {\cal L}_1$ if and only if
$\psi (y) \in {\cal L}_2$;
\medskip

\noindent (2)\quad $\psi$ can be computed by a real numbers machine
in polynomial time. }
\bigskip

\noindent {\bf Definition~2.}\quad {\sl {\bf Yes - No}-problem
${\cal L}$ is called $NP$-complete if
\medskip

\noindent (1)\quad ${\cal L} \in NP$;
\medskip

\noindent (2)\quad for any {\bf Yes - No}-problem ${\cal L}'$,
if ${\cal L}' \in NP$, then ${\cal L}' \propto_{\bf R} {\cal L}$.}
\bigskip

\noindent {\bf 6.}\quad {\bf 4-Feasibility is $NP$-complete}
\medskip

\noindent {\bf Theorem.}\quad {\sl 4-Feasibility problem is $NP$-complete.}
\medskip

\noindent {\bf Outline of a proof.}\quad We had already seen
that 4-Feasibility belongs to $NP$.

Now let ${\cal L}'$ be an arbitrary {\bf Yes - No}-problem from $NP$,
i.e., it can be solved by a
nondeterministic real numbers machine $M$ from the Definition~2, Section~3.
We construct the map $\psi$ from the Definition~2, Section~4 as follows.

Let $y \in {\cal L}'$ and the answer 1 ({\bf Yes}) is reached after
$T_M(y,y')$ steps.
Here $y'=(y'_1, \ldots , y'_k)$ is a ``guess'' of $M$.
According to the Corollary from LN~5.5, there exist an integer
$s$ and a polynomial $f_T$ in $s+l+k$ variables of degree not exceeding 4, such
that
$(y,y')$ is a halting input within $T_M(y,y') \le c({\rm size}(y))^q=T$
if and only if there exist
real numbers $u_1, u_2, \ldots u_s$ with
$$f_T(u_1, \ldots , u_s,y_1, \ldots , y_l,y'_1, \ldots , y'_k)=0.$$
Adding to this equation the equation $O(x_T)=1$ (recall that $O$ is the
unique output map of the machine $M$), we get a system which can be
straightforwardly converted to a single equation
$$f'_T(u'_1, \ldots , u'_{s'},y_1, \ldots , y_l,y'_1, \ldots , y'_k)=0$$
with $f'_T$ of degree at most 4.
Define $\psi (y_1, \ldots , y_l)$ to be a polynomial in variables
$$u'_1, \ldots , u'_{s'},y'_1, \ldots , y'_k$$
obtained from $f'_T$ by assigning to $l$ variables on places from $s'+1$ to $s'+l$
the values $y_1, \ldots , y_l$.

The fact that $\psi$ can be computed in polynomial time follows from the
complexity bounds ``hidden'' in the Theorem from LN~6.5
(we did not prove these bounds properly anyway).
\bigskip

\noindent {\bf Remark.}\quad Using some rather sophisticated algorithms,
based on algebraic geometry technique, it is possible to solve
4-Feasibility problem on ordinary (deterministic) machine
with complexity not exceeding $2^{O(n)}$.
Therefore, any problem from $NP$ can be solved on a deterministic machine
in exponential time.
Compare this with the straightforward elementary result for Turing machines.

\bye
